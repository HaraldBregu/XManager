// Generated by view binder compiler. Do not edit!
package com.ninespartans.xmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.ninespartans.xmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ContentDeviceBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final MaterialButton changeStateButton;

  @NonNull
  public final LinearLayout containerSection;

  @NonNull
  public final TextView deviceBleMac;

  @NonNull
  public final TextView deviceConnectionState;

  @NonNull
  public final TextView deviceName;

  @NonNull
  public final TextView deviceProgram;

  @NonNull
  public final TextView deviceState;

  @NonNull
  public final TextView deviceType;

  @NonNull
  public final TextView deviceUser;

  @NonNull
  public final TextView deviceVersion;

  @NonNull
  public final TextView headerDescription;

  @NonNull
  public final TextView headerTitle;

  @NonNull
  public final MaterialButton turnOffButton;

  private ContentDeviceBinding(@NonNull RelativeLayout rootView,
      @NonNull MaterialButton changeStateButton, @NonNull LinearLayout containerSection,
      @NonNull TextView deviceBleMac, @NonNull TextView deviceConnectionState,
      @NonNull TextView deviceName, @NonNull TextView deviceProgram, @NonNull TextView deviceState,
      @NonNull TextView deviceType, @NonNull TextView deviceUser, @NonNull TextView deviceVersion,
      @NonNull TextView headerDescription, @NonNull TextView headerTitle,
      @NonNull MaterialButton turnOffButton) {
    this.rootView = rootView;
    this.changeStateButton = changeStateButton;
    this.containerSection = containerSection;
    this.deviceBleMac = deviceBleMac;
    this.deviceConnectionState = deviceConnectionState;
    this.deviceName = deviceName;
    this.deviceProgram = deviceProgram;
    this.deviceState = deviceState;
    this.deviceType = deviceType;
    this.deviceUser = deviceUser;
    this.deviceVersion = deviceVersion;
    this.headerDescription = headerDescription;
    this.headerTitle = headerTitle;
    this.turnOffButton = turnOffButton;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ContentDeviceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ContentDeviceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.content_device, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ContentDeviceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.changeStateButton;
      MaterialButton changeStateButton = ViewBindings.findChildViewById(rootView, id);
      if (changeStateButton == null) {
        break missingId;
      }

      id = R.id.containerSection;
      LinearLayout containerSection = ViewBindings.findChildViewById(rootView, id);
      if (containerSection == null) {
        break missingId;
      }

      id = R.id.deviceBleMac;
      TextView deviceBleMac = ViewBindings.findChildViewById(rootView, id);
      if (deviceBleMac == null) {
        break missingId;
      }

      id = R.id.deviceConnectionState;
      TextView deviceConnectionState = ViewBindings.findChildViewById(rootView, id);
      if (deviceConnectionState == null) {
        break missingId;
      }

      id = R.id.deviceName;
      TextView deviceName = ViewBindings.findChildViewById(rootView, id);
      if (deviceName == null) {
        break missingId;
      }

      id = R.id.deviceProgram;
      TextView deviceProgram = ViewBindings.findChildViewById(rootView, id);
      if (deviceProgram == null) {
        break missingId;
      }

      id = R.id.deviceState;
      TextView deviceState = ViewBindings.findChildViewById(rootView, id);
      if (deviceState == null) {
        break missingId;
      }

      id = R.id.deviceType;
      TextView deviceType = ViewBindings.findChildViewById(rootView, id);
      if (deviceType == null) {
        break missingId;
      }

      id = R.id.deviceUser;
      TextView deviceUser = ViewBindings.findChildViewById(rootView, id);
      if (deviceUser == null) {
        break missingId;
      }

      id = R.id.deviceVersion;
      TextView deviceVersion = ViewBindings.findChildViewById(rootView, id);
      if (deviceVersion == null) {
        break missingId;
      }

      id = R.id.headerDescription;
      TextView headerDescription = ViewBindings.findChildViewById(rootView, id);
      if (headerDescription == null) {
        break missingId;
      }

      id = R.id.headerTitle;
      TextView headerTitle = ViewBindings.findChildViewById(rootView, id);
      if (headerTitle == null) {
        break missingId;
      }

      id = R.id.turnOffButton;
      MaterialButton turnOffButton = ViewBindings.findChildViewById(rootView, id);
      if (turnOffButton == null) {
        break missingId;
      }

      return new ContentDeviceBinding((RelativeLayout) rootView, changeStateButton,
          containerSection, deviceBleMac, deviceConnectionState, deviceName, deviceProgram,
          deviceState, deviceType, deviceUser, deviceVersion, headerDescription, headerTitle,
          turnOffButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
