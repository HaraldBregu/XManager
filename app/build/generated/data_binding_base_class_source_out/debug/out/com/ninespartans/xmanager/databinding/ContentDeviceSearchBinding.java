// Generated by view binder compiler. Do not edit!
package com.ninespartans.xmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.ninespartans.xmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ContentDeviceSearchBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout bottomSection;

  @NonNull
  public final MaterialButton closeButton;

  @NonNull
  public final MaterialButton debugButton;

  @NonNull
  public final TextView deviceSearchTitle;

  @NonNull
  public final ListView listView;

  @NonNull
  public final MaterialButton searchDevicesButton;

  @NonNull
  public final TextView textViewPlayerNameDetailTop;

  @NonNull
  public final LinearLayout topSection;

  private ContentDeviceSearchBinding(@NonNull RelativeLayout rootView,
      @NonNull LinearLayout bottomSection, @NonNull MaterialButton closeButton,
      @NonNull MaterialButton debugButton, @NonNull TextView deviceSearchTitle,
      @NonNull ListView listView, @NonNull MaterialButton searchDevicesButton,
      @NonNull TextView textViewPlayerNameDetailTop, @NonNull LinearLayout topSection) {
    this.rootView = rootView;
    this.bottomSection = bottomSection;
    this.closeButton = closeButton;
    this.debugButton = debugButton;
    this.deviceSearchTitle = deviceSearchTitle;
    this.listView = listView;
    this.searchDevicesButton = searchDevicesButton;
    this.textViewPlayerNameDetailTop = textViewPlayerNameDetailTop;
    this.topSection = topSection;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ContentDeviceSearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ContentDeviceSearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.content_device_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ContentDeviceSearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottom_section;
      LinearLayout bottomSection = ViewBindings.findChildViewById(rootView, id);
      if (bottomSection == null) {
        break missingId;
      }

      id = R.id.closeButton;
      MaterialButton closeButton = ViewBindings.findChildViewById(rootView, id);
      if (closeButton == null) {
        break missingId;
      }

      id = R.id.debugButton;
      MaterialButton debugButton = ViewBindings.findChildViewById(rootView, id);
      if (debugButton == null) {
        break missingId;
      }

      id = R.id.deviceSearchTitle;
      TextView deviceSearchTitle = ViewBindings.findChildViewById(rootView, id);
      if (deviceSearchTitle == null) {
        break missingId;
      }

      id = R.id.listView;
      ListView listView = ViewBindings.findChildViewById(rootView, id);
      if (listView == null) {
        break missingId;
      }

      id = R.id.searchDevicesButton;
      MaterialButton searchDevicesButton = ViewBindings.findChildViewById(rootView, id);
      if (searchDevicesButton == null) {
        break missingId;
      }

      id = R.id.textViewPlayerNameDetailTop;
      TextView textViewPlayerNameDetailTop = ViewBindings.findChildViewById(rootView, id);
      if (textViewPlayerNameDetailTop == null) {
        break missingId;
      }

      id = R.id.top_section;
      LinearLayout topSection = ViewBindings.findChildViewById(rootView, id);
      if (topSection == null) {
        break missingId;
      }

      return new ContentDeviceSearchBinding((RelativeLayout) rootView, bottomSection, closeButton,
          debugButton, deviceSearchTitle, listView, searchDevicesButton,
          textViewPlayerNameDetailTop, topSection);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
