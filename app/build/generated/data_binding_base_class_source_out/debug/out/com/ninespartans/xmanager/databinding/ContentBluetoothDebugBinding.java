// Generated by view binder compiler. Do not edit!
package com.ninespartans.xmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.ninespartans.xmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ContentBluetoothDebugBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout bottomSection;

  @NonNull
  public final MaterialButton closeButton;

  @NonNull
  public final TextView discoveringLogText;

  @NonNull
  public final Button downloadBinary;

  @NonNull
  public final EditText hoursEditText;

  @NonNull
  public final RadioButton ledPosition0;

  @NonNull
  public final RadioButton ledPosition1;

  @NonNull
  public final RadioButton ledPosition2;

  @NonNull
  public final RadioButton ledPosition3;

  @NonNull
  public final RadioButton ledPosition4;

  @NonNull
  public final Button lightSleep;

  @NonNull
  public final EditText minutesEditText;

  @NonNull
  public final RadioButton radioBlink;

  @NonNull
  public final RadioButton radioFade;

  @NonNull
  public final RadioButton radioStatic;

  @NonNull
  public final Button reboot;

  @NonNull
  public final Button resetReboot;

  @NonNull
  public final EditText secondsEditText;

  @NonNull
  public final Button setAllProgram;

  @NonNull
  public final Button setProgram;

  @NonNull
  public final Button turnoff;

  private ContentBluetoothDebugBinding(@NonNull RelativeLayout rootView,
      @NonNull LinearLayout bottomSection, @NonNull MaterialButton closeButton,
      @NonNull TextView discoveringLogText, @NonNull Button downloadBinary,
      @NonNull EditText hoursEditText, @NonNull RadioButton ledPosition0,
      @NonNull RadioButton ledPosition1, @NonNull RadioButton ledPosition2,
      @NonNull RadioButton ledPosition3, @NonNull RadioButton ledPosition4,
      @NonNull Button lightSleep, @NonNull EditText minutesEditText,
      @NonNull RadioButton radioBlink, @NonNull RadioButton radioFade,
      @NonNull RadioButton radioStatic, @NonNull Button reboot, @NonNull Button resetReboot,
      @NonNull EditText secondsEditText, @NonNull Button setAllProgram, @NonNull Button setProgram,
      @NonNull Button turnoff) {
    this.rootView = rootView;
    this.bottomSection = bottomSection;
    this.closeButton = closeButton;
    this.discoveringLogText = discoveringLogText;
    this.downloadBinary = downloadBinary;
    this.hoursEditText = hoursEditText;
    this.ledPosition0 = ledPosition0;
    this.ledPosition1 = ledPosition1;
    this.ledPosition2 = ledPosition2;
    this.ledPosition3 = ledPosition3;
    this.ledPosition4 = ledPosition4;
    this.lightSleep = lightSleep;
    this.minutesEditText = minutesEditText;
    this.radioBlink = radioBlink;
    this.radioFade = radioFade;
    this.radioStatic = radioStatic;
    this.reboot = reboot;
    this.resetReboot = resetReboot;
    this.secondsEditText = secondsEditText;
    this.setAllProgram = setAllProgram;
    this.setProgram = setProgram;
    this.turnoff = turnoff;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ContentBluetoothDebugBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ContentBluetoothDebugBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.content_bluetooth_debug, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ContentBluetoothDebugBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottom_section;
      LinearLayout bottomSection = ViewBindings.findChildViewById(rootView, id);
      if (bottomSection == null) {
        break missingId;
      }

      id = R.id.closeButton;
      MaterialButton closeButton = ViewBindings.findChildViewById(rootView, id);
      if (closeButton == null) {
        break missingId;
      }

      id = R.id.discovering_log_text;
      TextView discoveringLogText = ViewBindings.findChildViewById(rootView, id);
      if (discoveringLogText == null) {
        break missingId;
      }

      id = R.id.downloadBinary;
      Button downloadBinary = ViewBindings.findChildViewById(rootView, id);
      if (downloadBinary == null) {
        break missingId;
      }

      id = R.id.hoursEditText;
      EditText hoursEditText = ViewBindings.findChildViewById(rootView, id);
      if (hoursEditText == null) {
        break missingId;
      }

      id = R.id.ledPosition0;
      RadioButton ledPosition0 = ViewBindings.findChildViewById(rootView, id);
      if (ledPosition0 == null) {
        break missingId;
      }

      id = R.id.ledPosition1;
      RadioButton ledPosition1 = ViewBindings.findChildViewById(rootView, id);
      if (ledPosition1 == null) {
        break missingId;
      }

      id = R.id.ledPosition2;
      RadioButton ledPosition2 = ViewBindings.findChildViewById(rootView, id);
      if (ledPosition2 == null) {
        break missingId;
      }

      id = R.id.ledPosition3;
      RadioButton ledPosition3 = ViewBindings.findChildViewById(rootView, id);
      if (ledPosition3 == null) {
        break missingId;
      }

      id = R.id.ledPosition4;
      RadioButton ledPosition4 = ViewBindings.findChildViewById(rootView, id);
      if (ledPosition4 == null) {
        break missingId;
      }

      id = R.id.lightSleep;
      Button lightSleep = ViewBindings.findChildViewById(rootView, id);
      if (lightSleep == null) {
        break missingId;
      }

      id = R.id.minutesEditText;
      EditText minutesEditText = ViewBindings.findChildViewById(rootView, id);
      if (minutesEditText == null) {
        break missingId;
      }

      id = R.id.radioBlink;
      RadioButton radioBlink = ViewBindings.findChildViewById(rootView, id);
      if (radioBlink == null) {
        break missingId;
      }

      id = R.id.radioFade;
      RadioButton radioFade = ViewBindings.findChildViewById(rootView, id);
      if (radioFade == null) {
        break missingId;
      }

      id = R.id.radioStatic;
      RadioButton radioStatic = ViewBindings.findChildViewById(rootView, id);
      if (radioStatic == null) {
        break missingId;
      }

      id = R.id.reboot;
      Button reboot = ViewBindings.findChildViewById(rootView, id);
      if (reboot == null) {
        break missingId;
      }

      id = R.id.resetReboot;
      Button resetReboot = ViewBindings.findChildViewById(rootView, id);
      if (resetReboot == null) {
        break missingId;
      }

      id = R.id.secondsEditText;
      EditText secondsEditText = ViewBindings.findChildViewById(rootView, id);
      if (secondsEditText == null) {
        break missingId;
      }

      id = R.id.setAllProgram;
      Button setAllProgram = ViewBindings.findChildViewById(rootView, id);
      if (setAllProgram == null) {
        break missingId;
      }

      id = R.id.setProgram;
      Button setProgram = ViewBindings.findChildViewById(rootView, id);
      if (setProgram == null) {
        break missingId;
      }

      id = R.id.turnoff;
      Button turnoff = ViewBindings.findChildViewById(rootView, id);
      if (turnoff == null) {
        break missingId;
      }

      return new ContentBluetoothDebugBinding((RelativeLayout) rootView, bottomSection, closeButton,
          discoveringLogText, downloadBinary, hoursEditText, ledPosition0, ledPosition1,
          ledPosition2, ledPosition3, ledPosition4, lightSleep, minutesEditText, radioBlink,
          radioFade, radioStatic, reboot, resetReboot, secondsEditText, setAllProgram, setProgram,
          turnoff);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
