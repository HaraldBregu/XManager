// Generated by view binder compiler. Do not edit!
package com.ninespartans.xmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.ninespartans.xmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ContentBluetoothDebugBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout bottomSection;

  @NonNull
  public final MaterialButton closeButton;

  @NonNull
  public final TextView discoveringLogText;

  @NonNull
  public final Button downloadBinary;

  @NonNull
  public final LinearLayout footer;

  @NonNull
  public final EditText hoursEditText;

  @NonNull
  public final RadioButton ledPosition0;

  @NonNull
  public final RadioButton ledPosition1;

  @NonNull
  public final RadioButton ledPosition2;

  @NonNull
  public final RadioButton ledPosition3;

  @NonNull
  public final RadioButton ledPosition4;

  @NonNull
  public final EditText minutesEditText;

  @NonNull
  public final MaterialButton nextButton;

  @NonNull
  public final RadioButton radioBlink;

  @NonNull
  public final RadioButton radioFade;

  @NonNull
  public final RadioButton radioStatic;

  @NonNull
  public final Button reboot;

  @NonNull
  public final EditText secondsEditText;

  @NonNull
  public final Button setLeftDevice;

  @NonNull
  public final Button setNoMode;

  @NonNull
  public final Button setPass;

  @NonNull
  public final Button setProgram;

  @NonNull
  public final Button setRightDevice;

  @NonNull
  public final Button setSSID;

  @NonNull
  public final Button setUpdateMode;

  @NonNull
  public final Button setUpdateUrl;

  @NonNull
  public final Button setUpdateUrlNil;

  @NonNull
  public final Button sleep;

  private ContentBluetoothDebugBinding(@NonNull RelativeLayout rootView,
      @NonNull LinearLayout bottomSection, @NonNull MaterialButton closeButton,
      @NonNull TextView discoveringLogText, @NonNull Button downloadBinary,
      @NonNull LinearLayout footer, @NonNull EditText hoursEditText,
      @NonNull RadioButton ledPosition0, @NonNull RadioButton ledPosition1,
      @NonNull RadioButton ledPosition2, @NonNull RadioButton ledPosition3,
      @NonNull RadioButton ledPosition4, @NonNull EditText minutesEditText,
      @NonNull MaterialButton nextButton, @NonNull RadioButton radioBlink,
      @NonNull RadioButton radioFade, @NonNull RadioButton radioStatic, @NonNull Button reboot,
      @NonNull EditText secondsEditText, @NonNull Button setLeftDevice, @NonNull Button setNoMode,
      @NonNull Button setPass, @NonNull Button setProgram, @NonNull Button setRightDevice,
      @NonNull Button setSSID, @NonNull Button setUpdateMode, @NonNull Button setUpdateUrl,
      @NonNull Button setUpdateUrlNil, @NonNull Button sleep) {
    this.rootView = rootView;
    this.bottomSection = bottomSection;
    this.closeButton = closeButton;
    this.discoveringLogText = discoveringLogText;
    this.downloadBinary = downloadBinary;
    this.footer = footer;
    this.hoursEditText = hoursEditText;
    this.ledPosition0 = ledPosition0;
    this.ledPosition1 = ledPosition1;
    this.ledPosition2 = ledPosition2;
    this.ledPosition3 = ledPosition3;
    this.ledPosition4 = ledPosition4;
    this.minutesEditText = minutesEditText;
    this.nextButton = nextButton;
    this.radioBlink = radioBlink;
    this.radioFade = radioFade;
    this.radioStatic = radioStatic;
    this.reboot = reboot;
    this.secondsEditText = secondsEditText;
    this.setLeftDevice = setLeftDevice;
    this.setNoMode = setNoMode;
    this.setPass = setPass;
    this.setProgram = setProgram;
    this.setRightDevice = setRightDevice;
    this.setSSID = setSSID;
    this.setUpdateMode = setUpdateMode;
    this.setUpdateUrl = setUpdateUrl;
    this.setUpdateUrlNil = setUpdateUrlNil;
    this.sleep = sleep;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ContentBluetoothDebugBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ContentBluetoothDebugBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.content_bluetooth_debug, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ContentBluetoothDebugBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottom_section;
      LinearLayout bottomSection = ViewBindings.findChildViewById(rootView, id);
      if (bottomSection == null) {
        break missingId;
      }

      id = R.id.closeButton;
      MaterialButton closeButton = ViewBindings.findChildViewById(rootView, id);
      if (closeButton == null) {
        break missingId;
      }

      id = R.id.discovering_log_text;
      TextView discoveringLogText = ViewBindings.findChildViewById(rootView, id);
      if (discoveringLogText == null) {
        break missingId;
      }

      id = R.id.downloadBinary;
      Button downloadBinary = ViewBindings.findChildViewById(rootView, id);
      if (downloadBinary == null) {
        break missingId;
      }

      id = R.id.footer;
      LinearLayout footer = ViewBindings.findChildViewById(rootView, id);
      if (footer == null) {
        break missingId;
      }

      id = R.id.hoursEditText;
      EditText hoursEditText = ViewBindings.findChildViewById(rootView, id);
      if (hoursEditText == null) {
        break missingId;
      }

      id = R.id.ledPosition0;
      RadioButton ledPosition0 = ViewBindings.findChildViewById(rootView, id);
      if (ledPosition0 == null) {
        break missingId;
      }

      id = R.id.ledPosition1;
      RadioButton ledPosition1 = ViewBindings.findChildViewById(rootView, id);
      if (ledPosition1 == null) {
        break missingId;
      }

      id = R.id.ledPosition2;
      RadioButton ledPosition2 = ViewBindings.findChildViewById(rootView, id);
      if (ledPosition2 == null) {
        break missingId;
      }

      id = R.id.ledPosition3;
      RadioButton ledPosition3 = ViewBindings.findChildViewById(rootView, id);
      if (ledPosition3 == null) {
        break missingId;
      }

      id = R.id.ledPosition4;
      RadioButton ledPosition4 = ViewBindings.findChildViewById(rootView, id);
      if (ledPosition4 == null) {
        break missingId;
      }

      id = R.id.minutesEditText;
      EditText minutesEditText = ViewBindings.findChildViewById(rootView, id);
      if (minutesEditText == null) {
        break missingId;
      }

      id = R.id.nextButton;
      MaterialButton nextButton = ViewBindings.findChildViewById(rootView, id);
      if (nextButton == null) {
        break missingId;
      }

      id = R.id.radioBlink;
      RadioButton radioBlink = ViewBindings.findChildViewById(rootView, id);
      if (radioBlink == null) {
        break missingId;
      }

      id = R.id.radioFade;
      RadioButton radioFade = ViewBindings.findChildViewById(rootView, id);
      if (radioFade == null) {
        break missingId;
      }

      id = R.id.radioStatic;
      RadioButton radioStatic = ViewBindings.findChildViewById(rootView, id);
      if (radioStatic == null) {
        break missingId;
      }

      id = R.id.reboot;
      Button reboot = ViewBindings.findChildViewById(rootView, id);
      if (reboot == null) {
        break missingId;
      }

      id = R.id.secondsEditText;
      EditText secondsEditText = ViewBindings.findChildViewById(rootView, id);
      if (secondsEditText == null) {
        break missingId;
      }

      id = R.id.setLeftDevice;
      Button setLeftDevice = ViewBindings.findChildViewById(rootView, id);
      if (setLeftDevice == null) {
        break missingId;
      }

      id = R.id.setNoMode;
      Button setNoMode = ViewBindings.findChildViewById(rootView, id);
      if (setNoMode == null) {
        break missingId;
      }

      id = R.id.setPass;
      Button setPass = ViewBindings.findChildViewById(rootView, id);
      if (setPass == null) {
        break missingId;
      }

      id = R.id.setProgram;
      Button setProgram = ViewBindings.findChildViewById(rootView, id);
      if (setProgram == null) {
        break missingId;
      }

      id = R.id.setRightDevice;
      Button setRightDevice = ViewBindings.findChildViewById(rootView, id);
      if (setRightDevice == null) {
        break missingId;
      }

      id = R.id.setSSID;
      Button setSSID = ViewBindings.findChildViewById(rootView, id);
      if (setSSID == null) {
        break missingId;
      }

      id = R.id.setUpdateMode;
      Button setUpdateMode = ViewBindings.findChildViewById(rootView, id);
      if (setUpdateMode == null) {
        break missingId;
      }

      id = R.id.setUpdateUrl;
      Button setUpdateUrl = ViewBindings.findChildViewById(rootView, id);
      if (setUpdateUrl == null) {
        break missingId;
      }

      id = R.id.setUpdateUrlNil;
      Button setUpdateUrlNil = ViewBindings.findChildViewById(rootView, id);
      if (setUpdateUrlNil == null) {
        break missingId;
      }

      id = R.id.sleep;
      Button sleep = ViewBindings.findChildViewById(rootView, id);
      if (sleep == null) {
        break missingId;
      }

      return new ContentBluetoothDebugBinding((RelativeLayout) rootView, bottomSection, closeButton,
          discoveringLogText, downloadBinary, footer, hoursEditText, ledPosition0, ledPosition1,
          ledPosition2, ledPosition3, ledPosition4, minutesEditText, nextButton, radioBlink,
          radioFade, radioStatic, reboot, secondsEditText, setLeftDevice, setNoMode, setPass,
          setProgram, setRightDevice, setSSID, setUpdateMode, setUpdateUrl, setUpdateUrlNil, sleep);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
